@using CharacterCreator.ClassLibrary.Main.CharacterData

<div class="skill-card">
    <div class="skill-header">
        <span class="skill-header-label">@Skill.Name:</span>
        <span class="skill-header-mod">@ModifierDisplay</span>
    </div>
    <div class="checkbox-group">

        <div>
            @* <label>E</label> *@
            <input type="checkbox" class="skill-checkbox"
                   @bind:get="Skill.HasProficiency"
                   @bind:set="OnProficiencyChanged"
                   @bind:event="oninput"
                   ValueExpression="() => Skill.HasExpertise" />
        </div>
        <div>
            @* <label>E</label> *@
            <input type="checkbox" class="skill-checkbox"
                   @bind:get="Skill.HasExpertise"
                   @bind:set="OnExpertiseChanged"
                   @bind:event="oninput"
                   ValueExpression="() => Skill.HasExpertise"
                   disabled="@(Skill.HasProficiency == false)" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Skill Skill { get; set; }

    [Parameter]
    public EventCallback<bool> ProficiencyChanged { get; set; }

    [Parameter]
    public EventCallback<bool> ExpertiseChanged { get; set; }

    private async Task OnProficiencyChanged(bool e)
    {
        await ProficiencyChanged.InvokeAsync(e);
    }

    private async Task OnExpertiseChanged(bool e)
    {
        await ExpertiseChanged.InvokeAsync(e);
    }

    // Return the modifier as a string with a '+' if it is non-negative.
    private string ModifierDisplay => Skill.Modifier > 0 ? $"+{Skill.Modifier}" : Skill.Modifier.ToString();
}
