@page "/edit-character"
@rendermode InteractiveServer

@using CharacterCreator.ClassLibrary.Main
@using System.Text.Json

<h3>Edit Character</h3>

@if (character == null)
{
    <p>Loading character data...</p>
}
else
{
    <div class="dnd-character-sheet">
        <!-- ======== Header (Name, Class, Species, Level) ======== -->
        <div class="header-row">
            <div class="character-name">
                <label>Character Name</label>
                <InputText class="form-control" @bind-Value="character.Name" />
            </div>
            <div class="character-class">
                <label>Class</label>
                <InputText class="form-control" @bind-Value="character.CharacterClass" />
            </div>
            <div class="character-species">
                <label>Species</label>
                <InputText class="form-control" @bind-Value="character.Species" />
            </div>
            <div class="character-level">
                <label>Level</label>
                <InputNumber class="form-control" @bind-Value="character.Level" />
            </div>
        </div>

        <!-- ======== Abilities Row (STR, DEX, CON, INT, WIS, CHA) ======== -->
        <div class="abilities-row">
            <div class="ability">
                <label>Strength</label>
                <InputNumber class="form-control ability-score"
                             @bind-Value="character.Strength" />
                <div class="modifier">
                    Mod: @GetModifier(character.Strength)
                </div>
            </div>
            <div class="ability">
                <label>Dexterity</label>
                <InputNumber class="form-control ability-score"
                             @bind-Value="character.Dexterity" />
                <div class="modifier">
                    Mod: @GetModifier(character.Dexterity)
                </div>
            </div>
            <div class="ability">
                <label>Constitution</label>
                <InputNumber class="form-control ability-score"
                             @bind-Value="character.Constitution" />
                <div class="modifier">
                    Mod: @GetModifier(character.Constitution)
                </div>
            </div>
            <div class="ability">
                <label>Intelligence</label>
                <InputNumber class="form-control ability-score"
                             @bind-Value="character.Intelligence" />
                <div class="modifier">
                    Mod: @GetModifier(character.Intelligence)
                </div>
            </div>
            <div class="ability">
                <label>Wisdom</label>
                <InputNumber class="form-control ability-score"
                             @bind-Value="character.Wisdom" />
                <div class="modifier">
                    Mod: @GetModifier(character.Wisdom)
                </div>
            </div>
            <div class="ability">
                <label>Charisma</label>
                <InputNumber class="form-control ability-score"
                             @bind-Value="character.Charisma" />
                <div class="modifier">
                    Mod: @GetModifier(character.Charisma)
                </div>
            </div>
        </div>

        <!-- ======== Save Button ======== -->
        <button class="btn btn-primary mt-3" @onclick="SaveCharacter">Save</button>
    </div>
}

@code {
    // The character will either be loaded from a JSON file or initialized with empty values.
    private Character character;

    protected override async Task OnInitializedAsync()
    {
        // Check if a saved JSON file exists
        if (File.Exists("character.json"))
        {
            try
            {
                var json = await File.ReadAllTextAsync("character.json");
                // Attempt to deserialize the JSON into a Character object
                character = JsonSerializer.Deserialize<Character>(json);
            }
            catch (Exception)
            {
                // If there's an error during deserialization, fallback to an empty character.
                character = null;
            }
        }

        // If no saved character was found or deserialization failed, initialize a new, empty character.
        if (character == null)
        {
            character = new();
        }
    }

    private async Task SaveCharacter(MouseEventArgs e)
    {
        // Create JSON options for better readability (optional)
        var options = new JsonSerializerOptions { WriteIndented = true };
        // Serialize the character object to a JSON string
        var json = JsonSerializer.Serialize(character, options);

        // Save the JSON string to a file on the server (adjust the file path as necessary)
        await File.WriteAllTextAsync("character.json", json);
    }

    // Compute the attribute modifier using the standard D&D formula.
    private int GetModifier(int score)
    {
        return (int)Math.Floor((score - 10) / 2.0);
    }
}