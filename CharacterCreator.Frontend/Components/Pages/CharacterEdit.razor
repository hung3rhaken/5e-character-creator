@page "/edit-character"
@rendermode InteractiveServer

@inject CharacterService _characterService

@using CharacterCreator.ClassLibrary.Main
@using System.Text.Json
@using CharacterCreator.ClassLibrary.Main.CharacterClasses
@using CharacterCreator.Frontend.Services

<h3>Edit Character</h3>

<div class="character-select mb-3">
    <label>Select a character:</label>
    <select value="@selectedCharacter" @onchange="OnCharacterChanged" class="form-control d-inline-block" style="max-width: 300px;">
        <option value="">-- New Character --</option>
        <option value="">-- New Character --</option>
        @foreach (var name in availableCharacterNames)
        {
            <option value="@name">@name</option>
        }
    </select>
</div>

@if (character == null)
{
    <p>No character loaded. Enter a name and click "Load" to begin.</p>
}
else
{
    <div class="dnd-character-sheet">

        <!-- Header Component -->
        <CharacterHeader Character="character" />

        <!-- Abilities Row -->
        <div class="abilities-row">
            <AbilityInput Ability="@character.Strength" ScoreChanged="@(value => character.Strength.Score = value)" />
            <AbilityInput Ability="@character.Dexterity" ScoreChanged="@(value => character.Dexterity.Score = value)" />
            <AbilityInput Ability="@character.Constitution" ScoreChanged="@(value => character.Constitution.Score = value)" />
            <AbilityInput Ability="@character.Intelligence" ScoreChanged="@(value => character.Intelligence.Score = value)" />
            <AbilityInput Ability="@character.Wisdom" ScoreChanged="@(value => character.Wisdom.Score = value)" />
            <AbilityInput Ability="@character.Charisma" ScoreChanged="@(value => character.Charisma.Score = value)" />
        </div>
    </div>

    <div class="save-container text-center mt-3">
        <button class="btn btn-primary" @onclick="SaveCharacter">Save</button>
    </div>
}

@code {
    // List of available character names populated from the API.
    private List<string> availableCharacterNames = new List<string>();

    // Holds the currently selected character name from the dropdown.
    private string selectedCharacter = "";

    // The current character being edited.
    private CharacterBase? character;

    protected override async Task OnInitializedAsync()
    {
        // Retrieve available character names from the API.
        availableCharacterNames = await _characterService.GetAvailableCharactersAsync();
    }

    // Called when the selection in the dropdown changes.
    private async Task OnCharacterChanged(ChangeEventArgs e)
    {
        selectedCharacter = e.Value?.ToString() ?? "";
        await LoadCharacter();
    }

    private async Task LoadCharacter()
    {
        if (!string.IsNullOrWhiteSpace(selectedCharacter))
        {
            // Load the selected character from the API.
            character = await _characterService.GetCharacterAsync(selectedCharacter);
        }
        else
        {
            // If "-- New Character --" is selected, initialize a new character.
            character = new Character<Fighter>();
        }
    }

    private async Task SaveCharacter(MouseEventArgs e)
    {
        if (character != null)
        {
            if (string.IsNullOrEmpty(character.Name))
            {
                return;
            }

            var saved = await _characterService.SaveCharacterAsync(character);
            if (saved != null)
            {
                character = saved;

                // Refresh the available character names list.
                availableCharacterNames = await _characterService.GetAvailableCharactersAsync();

                // Optionally update the selected character to match the saved character.
                selectedCharacter = character.Name;
            }
        }
    }

    // Compute the attribute modifier using the standard D&D formula.
    private int GetModifier(int score)
    {
        return (int)Math.Floor((score - 10) / 2.0);
    }
}